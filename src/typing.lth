addition : (simple number, simple number) -> simple number;
subtraction : (simple number, simple number) -> simple number;
multiplication : (simple number, simple number) -> simple number;
division : (simple number, simple number) -> simple number;

typing
  : mutable (token of simple string
            & type of mutable (Simple of simple string))
            -> simple unit;
typing
  := (ast : (token of simple string
            & type of mutable (Simple of simple string)))
  ->
begin
  match ast with
  case token of (tk : simple string) & type of (_ : mutable (Simple of simple string)) ->
    begin
      ast.type := Simple of "string"
    end
  end
end